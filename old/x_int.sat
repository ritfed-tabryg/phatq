(set-option :smt.macro-finder true)
(set-option :parallel.enable true)

(define-const prefixes String "dozmarbinwansamlitsighidfidlissogdirwacsabwissibrigsoldopmodfoglidhopdardorlorhodfolrintogsilmirholpaslacrovlivdalsatlibtabhanticpidtorbolfosdotlosdilforpilramtirwintadbicdifrocwidbisdasmidloprilnardapmolsanlocnovsitnidtipsicropwitnatpanminritpodmottamtolsavposnapnopsomfinfonbanmorworsipronnorbotwicsocwatdolmagpicdavbidbaltimtasmalligsivtagpadsaldivdactansidfabtarmonranniswolmispallasdismaprabtobrollatlonnodnavfignomnibpagsopralbilhaddocridmocpacravripfaltodtiltinhapmicfanpattaclabmogsimsonpinlomrictapfirhasbosbatpochactidhavsaplindibhosdabbitbarracparloddosbortochilmactomdigfilfasmithobharmighinradmashalraglagfadtopmophabnilnosmilfopfamdatnoldinhatnacrisfotribhocnimlarfitwalrapsarnalmoslandondanladdovrivbacpollaptalpitnambonrostonfodponsovnocsorlavmatmipfip")
(define-const suffixes String "zodnecbudwessevpersutletfulpensytdurwepserwylsunrypsyxdyrnuphebpeglupdepdysputlughecryttyvsydnexlunmeplutseppesdelsulpedtemledtulmetwenbynhexfebpyldulhetmevruttylwydtepbesdexsefwycburderneppurrysrebdennutsubpetrulsynregtydsupsemwynrecmegnetsecmulnymtevwebsummutnyxrextebfushepbenmuswyxsymselrucdecwexsyrwetdylmynmesdetbetbeltuxtugmyrpelsyptermebsetdutdegtexsurfeltudnuxruxrenwytnubmedlytdusnebrumtynseglyxpunresredfunrevrefmectedrusbexlebduxrynnumpyxrygryxfeptyrtustyclegnemfermertenlusnussyltecmexpubrymtucfyllepdebbermughuttunbylsudpemdevlurdefbusbeprunmelpexdytbyttyplevmylwedducfurfexnulluclennerlexrupnedlecrydlydfenwelnydhusrelrudneshesfetdesretdunlernyrsebhulrylludremlysfynwerrycsugnysnyllyndyndemluxfedsedbecmunlyrtesmudnytbyrsenwegfyrmurtelreptegpecnelnevfes")

(define-fun syllable ((table String) (pos Int)) String
    (str.substr table (* pos 3) 3)
)

(define-fun star ((id (_ BitVec 16))) String
    (str.++
        (syllable prefixes (bv2int ((_ extract 15 8) id)))
        (syllable suffixes (bv2int ((_ extract 7 0) id)))
    )
)

(define-const ascii_table String "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

; TODO: more correct to define as int and not bitvec
(define-fun-rec str_as_int ((s String)) Int
    (ite (= (str.len s) 0) 0 (+
            (str.indexof ascii_table (str.at s 0))
            (* (str_as_int (str.substr s 1 (- (str.len s) 1))) 256)
    ))
)

; TODO: is this pre-declare necessary? defined later...
;(declare-fun hash ((_ BitVec 64)) (_ BitVec 16))

; TODO: put assert forall back here and change define-fun hash to constraint

; TODO: dynamic extract may not work (well)...
; TODO: switch back to extract
(define-fun get_byte ((v Int) (s Int)) Int
    (mod (div v (^ 256 s)) 256)
)


; the repeated pushing & popping may need to be done with a bash or python script or something
; but that's just template instantiation, and *should* be fast...
;(push)
    ; TODO: try single (very lucky!) fold operation w/constant
    ; before replicating what the python versions did
    ; repeat for different definitions of hash fn

    ; TODO: declare consts with sequences and/or recursively
    (declare-const a (_ BitVec 64))
    (declare-const b (_ BitVec 64))
    (declare-const c (_ BitVec 64))
    (declare-const d (_ BitVec 64))
    (declare-const e (_ BitVec 64))
    (declare-const f (_ BitVec 64))
    (declare-const g (_ BitVec 64))
    (declare-const h (_ BitVec 64))
    (declare-const x (_ BitVec 64))

    ;(define-fun hash ((name (_ BitVec 64))) (_ BitVec 16)
    ;    ((_ extract 15 0) (bvurem (bvadd (bvadd
    ;        (bvmul a (get_byte name 0))
    ;        (bvmul b (get_byte name 1))
    ;        (bvmul c (get_byte name 2))
    ;        (bvmul d (get_byte name 3))
    ;        (bvmul e (get_byte name 4))
    ;        (bvmul f (get_byte name 5))
    ;        (bvmul g (get_byte name 6))
    ;        (bvmul h (get_byte name 7))
    ;    ) x) #x000000000000ffff))
    ;)

    (define-fun hash ((name Int)) (_ BitVec 16)
        ((_ extract 15 0) (bvurem (bvadd (bvadd
            (bvmul a ((_ int2bv 64) (get_byte name 0)))
            (bvmul b ((_ int2bv 64) (get_byte name 1)))
            (bvmul c ((_ int2bv 64) (get_byte name 2)))
            (bvmul d ((_ int2bv 64) (get_byte name 3)))
            (bvmul e ((_ int2bv 64) (get_byte name 4)))
            (bvmul f ((_ int2bv 64) (get_byte name 5)))
            (bvmul g ((_ int2bv 64) (get_byte name 6)))
            (bvmul h ((_ int2bv 64) (get_byte name 7)))
        ) x) #x000000000000ffff))
    )

    ; this is the "meat" of the constraints, that specifies
    ; the mapping between hashes of stars' names and their IDs
    ;(assert (forall ((i (_ BitVec 16)))
    ;    (= (hash (str_as_int (star i))) i)
    ;))

    (assert (forall ((i (_ BitVec 16)))
        (implies (bvule i #x0002) (= (hash (str_as_int (star i))) i))
    ))

    ;(assert (= (hash (str_as_int (star #x0100))) #x0100))
    ;(assert (= (hash (str_as_int (star #x0101))) #x0101))
    ;(assert (= (hash (str_as_int (star #x0102))) #x0102))
    ;(assert (= (hash (str_as_int (star #x0103))) #x0103))

    (check-sat)
    ;(check-sat-using (then macro-finder smt))
    ;(check-sat-using (then macro-finder macro-finder))

    (get-constraints)

    (get-model)
    (eval a :completion true)
    (eval b :completion true)
    (eval c :completion true)
    (eval d :completion true)
    (eval e :completion true)
    (eval f :completion true)
    (eval g :completion true)
    (eval h :completion true)
    (eval x :completion true)    
;(pop)
