;(set-option :interactive-mode true) ; TODO: disable
(set-option :parallel.enable true)
(set-option :smt.macro-finder true)
;(set-option :smt.mbqi true)

(define-const prefixes String "dozmarbinwansamlitsighidfidlissogdirwacsabwissibrigsoldopmodfoglidhopdardorlorhodfolrintogsilmirholpaslacrovlivdalsatlibtabhanticpidtorbolfosdotlosdilforpilramtirwintadbicdifrocwidbisdasmidloprilnardapmolsanlocnovsitnidtipsicropwitnatpanminritpodmottamtolsavposnapnopsomfinfonbanmorworsipronnorbotwicsocwatdolmagpicdavbidbaltimtasmalligsivtagpadsaldivdactansidfabtarmonranniswolmispallasdismaprabtobrollatlonnodnavfignomnibpagsopralbilhaddocridmocpacravripfaltodtiltinhapmicfanpattaclabmogsimsonpinlomrictapfirhasbosbatpochactidhavsaplindibhosdabbitbarracparloddosbortochilmactomdigfilfasmithobharmighinradmashalraglagfadtopmophabnilnosmilfopfamdatnoldinhatnacrisfotribhocnimlarfitwalrapsarnalmoslandondanladdovrivbacpollaptalpitnambonrostonfodponsovnocsorlavmatmipfip")
(define-const suffixes String "zodnecbudwessevpersutletfulpensytdurwepserwylsunrypsyxdyrnuphebpeglupdepdysputlughecryttyvsydnexlunmeplutseppesdelsulpedtemledtulmetwenbynhexfebpyldulhetmevruttylwydtepbesdexsefwycburderneppurrysrebdennutsubpetrulsynregtydsupsemwynrecmegnetsecmulnymtevwebsummutnyxrextebfushepbenmuswyxsymselrucdecwexsyrwetdylmynmesdetbetbeltuxtugmyrpelsyptermebsetdutdegtexsurfeltudnuxruxrenwytnubmedlytdusnebrumtynseglyxpunresredfunrevrefmectedrusbexlebduxrynnumpyxrygryxfeptyrtustyclegnemfermertenlusnussyltecmexpubrymtucfyllepdebbermughuttunbylsudpemdevlurdefbusbeprunmelpexdytbyttyplevmylwedducfurfexnulluclennerlexrupnedlecrydlydfenwelnydhusrelrudneshesfetdesretdunlernyrsebhulrylludremlysfynwerrycsugnysnyllyndyndemluxfedsedbecmunlyrtesmudnytbyrsenwegfyrmurtelreptegpecnelnevfes")

(define-fun syllable ((table String) (pos Int)) String
    (str.substr table (* pos 3) 3)
)

(define-fun star ((id (_ BitVec 16))) String
    (str.++
        (syllable prefixes (bv2int ((_ extract 15 8) id)))
        (syllable suffixes (bv2int ((_ extract 7 0) id)))
    )
)

; warning: calling with strings >8 chars gives nonsense
; TODO: add index parameter instead of taking substrings (are they interned? it matters for perf)
(define-fun-rec str_as_u64 ((s String)) (_ BitVec 64)
    (ite (= (str.len s) 0) #x0000000000000000 (bvadd
        (concat #x00000000000000 (seq.nth s 0))
        (bvshl (str_as_u64 (str.substr s 1 (- (str.len s) 1))) #x0000000000000008)
    ))
)

; the repeated pushing & popping may need to be done with a bash or python script or something
; but that's just template instantiation, and *should* be fast...
;(push)
    ; TODO: try single (very lucky!) fold operation w/constant
    ; before replicating what the python versions did
    ; repeat for different definitions of hash fn

    ; TODO: declare consts with sequences and/or recursively
    (declare-const a (_ BitVec 64))
    (declare-const b (_ BitVec 64))
    (declare-const c (_ BitVec 64))
    (declare-const d (_ BitVec 64))
    (declare-const e (_ BitVec 64))
    (declare-const f (_ BitVec 64))
    (declare-const g (_ BitVec 64))
    (declare-const h (_ BitVec 64))
    (declare-const x (_ BitVec 64))

    ;(define-fun hash ((name (_ BitVec 64))) (_ BitVec 16)
    ;    ((_ extract 15 0) (bvurem (bvadd (bvadd
    ;        (bvmul a (get_byte name 0))
    ;        (bvmul b (get_byte name 1))
        ;        (bvmul c (get_byte name 2))
    ;        (bvmul d (get_byte name 3))
    ;        (bvmul e (get_byte name 4))
    ;        (bvmul f (get_byte name 5))
    ;        (bvmul g (get_byte name 6))
    ;        (bvmul h (get_byte name 7))
    ;    ) x) #x000000000000ffff))
    ;)

    (define-fun hash ((name (_ BitVec 64))) (_ BitVec 16)
        ((_ extract 15 0) (bvurem (bvadd
            ; TODO: use bitwise and instead of extract & concat?
            (bvmul a (concat #x00000000000000 ((_ extract 7 0) name)))
            (bvmul b (concat #x00000000000000 ((_ extract 15 8) name)))
            (bvmul c (concat #x00000000000000 ((_ extract 23 16) name)))
            (bvmul d (concat #x00000000000000 ((_ extract 31 24) name)))
            (bvmul e (concat #x00000000000000 ((_ extract 39 32) name)))
            (bvmul f (concat #x00000000000000 ((_ extract 47 40) name)))
            (bvmul g (concat #x00000000000000 ((_ extract 55 48) name)))
            (bvmul h (concat #x00000000000000 ((_ extract 63 56) name)))
            x
        ) #x000000000000ffff))
    )

    (assert (= (hash (str_as_u64 (star #x0100))) #x0100))
    (assert (= (hash (str_as_u64 (star #x0101))) #x0101))
    (assert (= (hash (str_as_u64 (star #x0102))) #x0102))
    (assert (= (hash (str_as_u64 (star #x0103))) #x0103))

    ; this is the "meat" of the constraints, that specifies
    ; the mapping between hashes of stars' names and their IDs
    ;(assert (forall ((i (_ BitVec 16)))
    ;    (=> (bvule i #x0002) (= (hash (str_as_u64 (star i))) i))
    ;))

    (check-sat)
    ;(check-sat-using (then macro-finder smt))

    (get-model)
    (eval a :completion true)
    (eval b :completion true)
    (eval c :completion true)
    (eval d :completion true)
    (eval e :completion true)
    (eval f :completion true)
    (eval g :completion true)
    (eval h :completion true)
    (eval x :completion true)    
;(pop)
